(()=>{"use strict";var e,n={446:(e,n,o)=>{var t=o(96),i=o(230),r=o(846);o.n(r)()();new i.ZP({el:document.querySelector("[data-scroll-container]"),smooth:!0,smartphone:{smooth:!1},tablet:{smooth:!1}});var a=document.querySelector("footer");window.addEventListener("scroll",(function(){window.scrollY,screen.height;document.documentElement.scrollTop+window.innerHeight+200>=document.body.scrollHeight&&a.classList.add("on")})),window.addEventListener("load",(function(){var e=new t.Sg,n=new t.Sg,o={max:0,applied:0},i=new t.s_({container:"canvas",watchScroll:!1,pixelRatio:Math.min(1.5,window.devicePixelRatio)});i.onError((function(){document.body.classList.add("no-curtains")})).onContextLost((function(){i.restoreContext()}));var r=document.getElementsByClassName("curtain"),a={vertexShader:"\n        precision mediump float;\n\n        // default mandatory variables\n        attribute vec3 aVertexPosition;\n        attribute vec2 aTextureCoord;\n\n        uniform mat4 uMVMatrix;\n        uniform mat4 uPMatrix;\n        \n        // our texture matrix uniform\n        uniform mat4 simplePlaneTextureMatrix;\n\n        // custom variables\n        varying vec3 vVertexPosition;\n        varying vec2 vTextureCoord;\n\n        uniform float uTime;\n        uniform vec2 uResolution;\n        uniform vec2 uMousePosition;\n        uniform float uMouseMoveStrength;\n\n\n        void main() {\n\n            vec3 vertexPosition = aVertexPosition;\n\n            // get the distance between our vertex and the mouse position\n            float distanceFromMouse = distance(uMousePosition, vec2(vertexPosition.x, vertexPosition.y));\n\n            // calculate our wave effect\n            float waveSinusoid = cos(5.0 * (distanceFromMouse - (uTime / 75.0)));\n\n            // attenuate the effect based on mouse distance\n            float distanceStrength = (0.4 / (distanceFromMouse + 0.4));\n\n            // calculate our distortion effect\n            float distortionEffect = distanceStrength * waveSinusoid * uMouseMoveStrength;\n\n            // apply it to our vertex position\n            vertexPosition.z +=  distortionEffect / 30.0;\n            vertexPosition.x +=  (distortionEffect / 30.0 * (uResolution.x / uResolution.y) * (uMousePosition.x - vertexPosition.x));\n            vertexPosition.y +=  distortionEffect / 30.0 * (uMousePosition.y - vertexPosition.y);\n\n            gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);\n\n            // varyings\n            vTextureCoord = (simplePlaneTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;\n            vVertexPosition = vertexPosition;\n        }\n    ",fragmentShader:"\n        precision mediump float;\n\n        varying vec3 vVertexPosition;\n        varying vec2 vTextureCoord;\n\n        uniform sampler2D simplePlaneTexture;\n\n        void main() {\n            // apply our texture\n            vec4 finalColor = texture2D(simplePlaneTexture, vTextureCoord);\n\n            // fake shadows based on vertex position along Z axis\n            finalColor.rgb -= clamp(-vVertexPosition.z, 0.0, 1.0);\n            // fake lights based on vertex position along Z axis\n            finalColor.rgb += clamp(vVertexPosition.z, 0.0, 1.0);\n\n            // handling premultiplied alpha (useful if we were using a png with transparency)\n            finalColor = vec4(finalColor.rgb * finalColor.a, finalColor.a);\n\n            gl_FragColor = finalColor;\n        }\n    ",widthSegments:20,heightSegments:20,uniforms:{resolution:{name:"uResolution",type:"2f",value:[r[0].clientWidth,r[0].clientHeight]},time:{name:"uTime",type:"1f",value:0},mousePosition:{name:"uMousePosition",type:"2f",value:e},mouseMoveStrength:{name:"uMouseMoveStrength",type:"1f",value:0}}},s=new t.JO(i,r[0],a);function u(r,a){n.copy(e);var s=new t.Sg;if(r.targetTouches?s.set(r.targetTouches[0].clientX,r.targetTouches[0].clientY):s.set(r.clientX,r.clientY),e.set(i.lerp(e.x,s.x,.3),i.lerp(e.y,s.y,.3)),a.uniforms.mousePosition.value=a.mouseToPlaneCoords(e),n.x&&n.y){var u=Math.sqrt(Math.pow(e.x-n.x,2)+Math.pow(e.y-n.y,2))/30;(u=Math.min(4,u))>=o.max&&(o.max=u)}}s.onReady((function(){s.setPerspective(35),o.max=2;var e=document.getElementById("page-wrap");e.addEventListener("mousemove",(function(e){u(e,s)})),e.addEventListener("touchmove",(function(e){u(e,s)}),{passive:!0})})).onRender((function(){s.uniforms.time.value++,o.applied+=.02*(o.max-o.applied),o.max+=.01*(0-o.max),s.uniforms.mouseMoveStrength.value=o.applied})).onAfterResize((function(){var e=s.getBoundingRect();s.uniforms.resolution.value=[e.width,e.height]})).onError((function(){document.body.classList.add("no-curtains")}))}))}},o={};function t(e){var i=o[e];if(void 0!==i)return i.exports;var r=o[e]={exports:{}};return n[e].call(r.exports,r,r.exports,t),r.exports}t.m=n,e=[],t.O=(n,o,i,r)=>{if(!o){var a=1/0;for(c=0;c<e.length;c++){for(var[o,i,r]=e[c],s=!0,u=0;u<o.length;u++)(!1&r||a>=r)&&Object.keys(t.O).every((e=>t.O[e](o[u])))?o.splice(u--,1):(s=!1,r<a&&(a=r));if(s){e.splice(c--,1);var l=i();void 0!==l&&(n=l)}}return n}r=r||0;for(var c=e.length;c>0&&e[c-1][2]>r;c--)e[c]=e[c-1];e[c]=[o,i,r]},t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e={179:0};t.O.j=n=>0===e[n];var n=(n,o)=>{var i,r,[a,s,u]=o,l=0;if(a.some((n=>0!==e[n]))){for(i in s)t.o(s,i)&&(t.m[i]=s[i]);if(u)var c=u(t)}for(n&&n(o);l<a.length;l++)r=a[l],t.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return t.O(c)},o=self.webpackChunkshin_portfolio=self.webpackChunkshin_portfolio||[];o.forEach(n.bind(null,0)),o.push=n.bind(null,o.push.bind(o))})();var i=t.O(void 0,[589],(()=>t(446)));i=t.O(i)})();